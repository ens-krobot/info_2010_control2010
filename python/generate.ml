(*
 * generate.ml
 * -----------
 * Copyright : (c) 2010, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of [kro]bot.
 *)

open Printf
open OBus_introspect_ext
open OBus_value

let gen_symbol (name, symbol) =
  match symbol with
    | Sym_enum(typ, values)
    | Sym_flag(typ, values) ->
        List.iter
          (fun (value, key) ->
             match value with
               | V.Int32 x | V.Uint32 x ->
                   printf "%s_%s = %ld\n" (String.uppercase name) (String.uppercase key) x
               | _ ->
                   ())
          values;
        print_newline ()

let arg annotations (name, typ) =
  match name with
    | Some name -> begin
        try
          name ^ "=" ^ List.assoc ("default." ^ name) annotations
        with Not_found ->
          name
      end
    | None ->
        failwith "unmamed argument"

let arg_name (name, typ) =
  match name with
    | Some name ->
        name
    | None ->
        failwith "unmamed argument"

let gen_member iface = function
  | Method(name, args, _, annotations) ->
      printf "    def %s(%s):\n" name (String.concat ", " ("self" :: List.map (arg annotations) args));
      printf "        return self.proxy.%s(%s)\n\n" name (String.concat ", " (List.map arg_name args))
  | Property(name, _, access, _) ->
      if access = Read || access = Read_write then begin
        printf "    def %s(self):\n" name;
        printf "        return self.proxy.Get('%s', '%s')\n\n" iface name
      end;
      if access = Write || access = Read_write then begin
        printf "    def set_%s(self, value):\n" name;
        printf "        return self.proxy.Set('%s', '%s', value)\n\n" iface name
      end
  | _ ->
      ()

let gen_class (name, members, symbols, annotations) =
  match Text.rev_split ~sep:"." ~max:2 name with
    | ["fr.krobot.Service"; short_name] ->
        print_newline ();
        List.iter gen_symbol symbols;
        printf "\
class %s:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object(\"fr.krobot.Service.%s\", \"/fr/krobot/Services/%s\")

" short_name short_name short_name;
        List.iter (gen_member name) members
    | _ ->
        ()

let () =
  let sources = List.tl (Array.to_list Sys.argv) in
  let interfaces = List.concat (List.map OBus_idl.parse_file sources) in

  printf "\
# File autogenerated by generate.ml, DO NOT EDIT!

import dbus

bus = None

def get_bus():
    global bus
    if bus == None:
        bus = dbus.bus.BusConnection(\"unix:abstract=krobot\")
    return bus

";

  List.iter gen_class interfaces
