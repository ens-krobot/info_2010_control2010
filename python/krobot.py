# File autogenerated by generate.ml, DO NOT EDIT!

import dbus

bus = None

def get_bus():
    global bus
    if bus == None:
        bus = dbus.bus.BusConnection("unix:abstract=krobot")
    return bus


class Claws:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object("fr.krobot.Service.Claws", "/fr/krobot/Services/Claws")

    def enable(self):
        return self.proxy.enable()

    def disable(self):
        return self.proxy.disable()

    def open(self):
        return self.proxy.open()

    def close(self):
        return self.proxy.close()

    def take(self):
        return self.proxy.take()


class Gate:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object("fr.krobot.Service.Gate", "/fr/krobot/Services/Gate")

    def enable(self):
        return self.proxy.enable()

    def disable(self):
        return self.proxy.disable()

    def close(self):
        return self.proxy.close()

    def open(self):
        return self.proxy.open()

    def hold_closed(self):
        return self.proxy.hold_closed()

    def stop(self):
        return self.proxy.stop()


class Grip:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object("fr.krobot.Service.Grip", "/fr/krobot/Services/Grip")

    def up(self):
        return self.proxy.up()

    def down(self):
        return self.proxy.down()

    def open(self):
        return self.proxy.open()

    def close(self):
        return self.proxy.close()

    def release(self):
        return self.proxy.release()


MOVE_RESULT_SUCCESS = 0
MOVE_RESULT_STOPPED = 1
MOVE_RESULT_INHIBITED = 2
MOVE_RESULT_REPLACED = 3

STOP_MODE_OFF = 0
STOP_MODE_ABRUPT = 1
STOP_MODE_SMOOTH = 2

class Motors:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object("fr.krobot.Service.Motors", "/fr/krobot/Services/Motors")

    def turn(self, angle=0.785398163397448279, velocity=0.4, acceleration=0.8):
        return self.proxy.turn(angle, velocity, acceleration)

    def move(self, distance=0.1, velocity=0.4, acceleration=0.8):
        return self.proxy.move(distance, velocity, acceleration)

    def stop(self, mode=2):
        return self.proxy.stop(mode)

    def set_velocities(self, velocity_r, acceleration_r, velocity_l, acceleration_l, duration):
        return self.proxy.set_velocities(velocity_r, acceleration_r, velocity_l, acceleration_l, duration)

    def inhibited_forward(self):
        return self.proxy.Get('fr.krobot.Service.Motors', 'inhibited_forward')

    def inhibited_backward(self):
        return self.proxy.Get('fr.krobot.Service.Motors', 'inhibited_backward')

    def inhibit_forward(self, duration):
        return self.proxy.inhibit_forward(duration)

    def inhibit_backward(self, duration):
        return self.proxy.inhibit_backward(duration)


COLOR_BLUE = 0
COLOR_YELLOW = 1

class Sensors:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object("fr.krobot.Service.Sensors", "/fr/krobot/Services/Sensors")

    def color(self):
        return self.proxy.Get('fr.krobot.Service.Sensors', 'color')

    def infrareds(self):
        return self.proxy.Get('fr.krobot.Service.Sensors', 'infrareds')

    def logic_sensors(self):
        return self.proxy.Get('fr.krobot.Service.Sensors', 'logic_sensors')

    def range_finders(self):
        return self.proxy.Get('fr.krobot.Service.Sensors', 'range_finders')


class Turret:
    proxy = None

    def __init__(self):
        self.proxy = (get_bus ()).get_object("fr.krobot.Service.Turret", "/fr/krobot/Services/Turret")

    def goto(self, angle):
        return self.proxy.goto(angle)

    def scan(self):
        return self.proxy.scan()

    def find(self):
        return self.proxy.find()

